<?php

use Drupal\Component\Serialization\Yaml;
use Drupal\Core\File\FileSystemInterface;

/**
 * @file
 * Enables modules and site configuration for sm_dev_portal.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function sm_dev_portal_install() {
	// First, do everything that is done in the standard profile.
	include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
	standard_install();

	// Copy favicon from resources to public folder
	$file_favicon = 'favicon.ico';
	$image = file_get_contents(drupal_get_path('profile', 'sm_dev_portal') . '/resources/' . $file_favicon);
	\Drupal::service('file_system')->saveData($image, 'public://'.$file_favicon, FileSystemInterface::EXISTS_REPLACE);

	// Copy image from resources to public folder.
	$folder_names = [
		'apidoc_specs',
		'banners',
		'content_images',
		'icons',
		'inline-images',
		'media',
		'media-icons',
		'vector_images',
	];

	foreach ($folder_names as $folder_name) {
		$path = 'public://' . $folder_name . '/';

		if ($folder_name == 'content_images') $path = 'public://' . $folder_name . '/articles/';
		if ($folder_name == 'media') $path = 'public://' . $folder_name . '/image/';
		if ($folder_name == 'media-icons') $path = 'public://' . $folder_name . '/generic/';

		if (\Drupal::service('file_system')->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY)) {
			$original = drupal_get_path('profile', 'sm_dev_portal') . '/resources/' . $folder_name;
			$files = \Drupal::service('file_system')->scanDirectory($original, '/.*/');
			if (!empty($files)) {
				foreach ($files as $file) {
					if (!empty($file->uri)) {
						\Drupal::service('file_system')->copy($file->uri, $path, FileSystemInterface::EXISTS_REPLACE);
					}
				}
			}
		}
	}

  // Enable the default content module. This can't be specified as a dependency.
  \Drupal::service('module_installer')->install(['sm_dev_portal_content'], TRUE);
  $config = \Drupal::configFactory()->getEditable('system.site');
  $config->set('page.front', '/node/1')->save();
}

/**
 * Update Apigee API Catalog to latest patch (2.x).
 */
function sm_dev_portal_update_8001() {
  $module_handler = \Drupal::moduleHandler();
  if (!$module_handler->moduleExists('apigee_api_catalog')) {
    return;
  }

  $config_path = drupal_get_path('profile', 'sm_dev_portal') . '/config/install';
	$config_path_update = drupal_get_path('profile', 'sm_dev_portal') . '/config_update/install';

	if ($module_handler->moduleExists('field')) {
		$config_to_imports = [
			'field.field.node.apidoc.field_service_type_apidoc',
			'field.storage.node.field_service_type_apidoc',
		];

		foreach($config_to_imports as $config_to_import) {
			$raw_data = file_get_contents("$config_path_update/$config_to_import.yml");
			$decode_data = Yaml::decode($raw_data);
			\Drupal::configFactory()
				->getEditable($config_to_import)
				->setData($decode_data)
				->save(TRUE);
		}
	}

	if ($module_handler->moduleExists('apigee_api_catalog')) {
		$config_to_imports = [
			'core.entity_form_display.node.apidoc.default',
			'core.entity_view_display.node.apidoc.default',
			'core.entity_view_display.node.apidoc.cards',
		];

		foreach($config_to_imports as $config_to_import) {
			$raw_data = file_get_contents("$config_path_update/$config_to_import.yml");
			$decode_data = Yaml::decode($raw_data);
			\Drupal::configFactory()
				->getEditable($config_to_import)
				->setData($decode_data)
				->save(TRUE);
		}
	}

  if ($module_handler->moduleExists('views')) {
    $config_to_import = 'views.view.apigee_api_catalog';
    $raw_data = file_get_contents("$config_path_update/$config_to_import.yml");
    $decode_data = Yaml::decode($raw_data);
    \Drupal::configFactory()
      ->getEditable($config_to_import)
      ->setData($decode_data)
      ->save(TRUE);
  }

}
